#!/usr/bin/env python3

"""
datAFLow clang driver.

Author: Adrian Herrera
"""

from argparse import ArgumentParser
from itertools import chain
from pathlib import Path
from subprocess import run
import os
import sys


THIS_FILE = Path(__file__).name
THIS_DIR = Path(__file__).parent.resolve()
LIB_DIR = Path(THIS_DIR.parent) / 'lib'


def parse_args():
    """Parse command-line options."""
    parser = ArgumentParser(description='datAFLow C compiler')

    # def site options
    def_arg_group = parser.add_argument_group('def sites', 'Def site options')
    def_arg_group.add_argument('--def-mem-funcs', type=Path, metavar='TXT',
                               help='LLVM special case list of custom memory '
                               'allocation functions')
    def_arg_group.add_argument('--def-sensitivity', default=[], action='append',
                               choices=('array', 'struct'),
                               help='def site sensitivity')

    # Use site options
    use_arg_group = parser.add_argument_group('use sites', 'Use site options')
    use_arg_group.add_argument('--use-sensitivity', default=[], action='append',
                               choices=('read', 'write'),
                               help='use site sensitivity')
    use_arg_group.add_argument('--use-capture',
                                choices=('use', 'offset', 'value'),
                                help='what to capture at the use site')
    use_arg_group.add_argument('--use-inst', choices=('afl', 'debug'),
                               help='use site instrumentation type')

    return parser.parse_known_args()


def main():
    """The main function."""
    args, clang_args = parse_args()
    env = os.environ.copy()

    if THIS_FILE.endswith('c++'):
        cmd = [Path('@LLVM_TOOLS_BINARY_DIR@', 'clang++')]
    else:
        cmd = [Path('@LLVM_TOOLS_BINARY_DIR@', 'clang')]

    cmd.extend([
        '-g', '-fno-discard-value-names',

        '-Xclang', '-load', '-Xclang', f'{LIB_DIR}/libMem2Reg.so',

        '-Xclang', '-load', '-Xclang', f'{LIB_DIR}/libLowerDebugDeclare.so',
        '-Xclang', '-load', '-Xclang', f'{LIB_DIR}/libLowerAtomic.so',
        '-Xclang', '-load', '-Xclang', f'{LIB_DIR}/libLowerMemIntrinsic.so',
        '-Xclang', '-load', '-Xclang', f'{LIB_DIR}/libLowerNewDelete.so',
        '-Xclang', '-load', '-Xclang', f'{LIB_DIR}/libLowerConstantExpr.so',
        '-Xclang', '-load', '-Xclang', f'{LIB_DIR}/libStripLifetime.so',

        '-Xclang', '-load', '-Xclang', f'{LIB_DIR}/libVariableRecovery.so',
        '-Xclang', '-load', '-Xclang', f'{LIB_DIR}/libMemFuncIdentify.so',
        '-Xclang', '-load', '-Xclang', f'{LIB_DIR}/libDefSiteIdentify.so',
        '-Xclang', '-load', '-Xclang', f'{LIB_DIR}/libUseSiteIdentify.so',

        '-Xclang', '-load', '-Xclang', f'{LIB_DIR}/libGlobalVariableTag.so',
        '-Xclang', '-load', '-Xclang', f'{LIB_DIR}/libLocalVariableTag.so',
        '-Xclang', '-load', '-Xclang', f'{LIB_DIR}/libHeapTag.so',
    ])

    # Def site function ignore list
    if 'FUZZALLOC_DEF_FUNC_IGNORE' in env:
        func_ignore = env['FUZZALLOC_DEF_FUNC_IGNORE']
    else:
        func_ignore = None

    if func_ignore:
        cmd.extend(['-mllvm', f'-fuzzalloc-def-ignore-funcs={func_ignore}'])

    # Def site dynamic memory allocation functions
    if 'FUZZALLOC_DEF_MEM_FUNCS' in env:
        def_mem_funcs = env['FUZZALLOC_DEF_MEM_FUNCS']
    elif args.def_mem_funcs:
        def_mem_funcs = args.def_mem_funcs
    else:
        def_mem_funcs = None

    if def_mem_funcs:
        cmd.extend(['-mllvm', f'-fuzzalloc-custom-mem-funcs={def_mem_funcs}'])

    # Def site sensitivity
    if 'FUZZALLOC_DEF_SENSITIVITY' in env:
        def_iter = (['-mllvm', f'-fuzzalloc-def-{def_sensitivity}'] for
                def_sensitivity in env['FUZZALLOC_DEF_SENSITIVITY'].split(':'))
        def_sensitivities = chain.from_iterable(def_iter)
    elif args.def_sensitivity:
        def_iter = (['-mllvm', f'-fuzzalloc-def-{def_sensitivity}'] for
                def_sensitivity in args.def_sensitivity)
        def_sensitivities = chain.from_iterable(def_iter)
    else:
        def_sensitivities = []

    cmd.extend(def_sensitivities)

    # Use site sensitivity
    if 'FUZZALLOC_USE_SENSITIVITY' in env:
        use_iter = (['-mllvm', f'-fuzzalloc-use-{use_sensitivity}'] for
                use_sensitivity in env['FUZZALLOC_USE_SENSITIVITY'].split(':'))
        use_sensitivities = chain.from_iterable(use_iter)
    elif args.use_sensitivity:
        use_iter = (['-mllvm', f'-fuzzalloc-use-{use_sensitivity}'] for
                use_sensitivity in args.use_sensitivity)
        use_sensitivities = chain.from_iterable(use_iter)
    else:
        use_sensitivities = []

    cmd.extend(use_sensitivities)

    # Use site capture
    if 'FUZZALLOC_USE_CAPTURE' in env:
        use_capture = env['FUZZALLOC_USE_CAPTURE']
    elif args.use_capture:
        use_capture = args.use_capture
    else:
        use_capture = None

    if use_capture:
        cmd.extend(['-mllvm', f'-fuzzalloc-capture-{use_capture}'])

    # Use site instrumentation
    if 'FUZZALLOC_USE_INST' in env:
        use_inst = env['FUZZALLOC_USE_INST']
    elif args.use_inst:
        use_inst = args.use_inst
    else:
        use_inst = None

    if use_inst == 'afl':
        cmd.extend([
            '-O3',
            '-Xclang', '-load', '-Xclang', f'{LIB_DIR}/libAFLUseSite.so',
        ])
    elif use_inst == 'debug':
        cmd.extend([
            '-O0',
            '-Xclang', '-load', '-Xclang', f'{LIB_DIR}/libDebugUseSite.so',
        ])

    # Clang args
    cmd.extend(clang_args)

    # Linker args
    cmd.extend([f'-L{LIB_DIR}', '-lFuzzallocRuntime'])
    if use_inst == 'afl':
        cmd.extend([f'-L{LIB_DIR}', '-lAFLRuntime'])

    cmd.append('-Qunused-arguments')

    proc = run(cmd, check=False)
    return proc.returncode


if __name__ == '__main__':
    sys.exit(main())
